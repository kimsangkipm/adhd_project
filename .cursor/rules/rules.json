{
  "name": "Django 개발 가이드",
  "description": "Django 및 확장 가능한 웹 애플리케이션 개발을 위한 가이드라인",
  "rules": [
    {
      "category": "핵심 원칙",
      "items": [
        "명확하고 기술적인 응답을 제공하며, Django의 예제를 정확하게 작성한다.",
        "Django의 내장 기능과 도구를 최대한 활용하여 프레임워크의 장점을 극대화한다.",
        "코드의 가독성(readability) 및 유지보수성(maintainability)을 우선하며, Django의 코딩 스타일 가이드(PEP 8)를 준수한다.",
        "변수 및 함수명을 설명적으로(descriptive) 작성하며, 네이밍 컨벤션(예: 함수 및 변수는 소문자 + 언더스코어)을 따른다.",
        "프로젝트를 Django 앱(apps) 단위로 구조화하여 재사용성(reusability)과 관심사의 분리(separation of concerns)를 촉진한다."
      ]
    },
    {
      "category": "Django/Python 개발 가이드",
      "items": [
        "클래스 기반 뷰(CBV)를 활용하여 복잡한 로직을 구현하고, 간단한 로직에는 함수 기반 뷰(FBV)를 선호한다.",
        "데이터베이스와의 상호작용은 Django ORM을 사용하며, 성능상의 이유로 필요한 경우를 제외하고는 Raw SQL 사용을 지양한다.",
        "사용자 관리는 Django의 내장 User 모델 및 인증 프레임워크(auth framework)를 활용한다.",
        "폼 처리 및 유효성 검사는 Django의 Form 및 ModelForm 클래스를 활용한다.",
        "MVT(Model-View-Template) 패턴을 철저히 준수하여 관심사의 분리를 명확히 한다.",
        "인증, 로깅, 캐싱과 같은 횡단 관심사(cross-cutting concerns) 처리는 미들웨어(middleware)를 적절히 활용하여 처리한다."
      ]
    },
    {
      "category": "에러 처리 및 데이터 유효성 검사",
      "items": [
        "뷰(view) 수준에서 에러 핸들링을 구현하고, Django의 내장 에러 처리 메커니즘을 적극 활용한다.",
        "Django의 유효성 검사(validation) 프레임워크를 사용하여 폼 및 모델 데이터를 검증한다.",
        "예외 처리는 try-except 블록을 사용하여 비즈니스 로직 및 뷰에서 안전하게 처리한다.",
        "404, 500 등의 커스텀 에러 페이지를 제작하여 사용자 경험을 향상하고 유용한 정보를 제공한다.",
        "Django의 신호(signals)를 활용하여 에러 핸들링 및 로깅을 핵심 비즈니스 로직과 분리한다."
      ]
    },
    {
      "category": "프로젝트에서 사용하는 주요 패키지",
      "items": [
        "Django",
        "Django REST Framework (DRF) → API 개발용",
        "Celery → 백그라운드 태스크 처리",
        "Redis → 캐싱 및 태스크 큐 사용",
        "PostgreSQL 또는 MySQL → 프로덕션 환경에서 권장되는 데이터베이스"
      ]
    },
    {
      "category": "Django 개발 시 권장 사항",
      "items": [
        "HTML 렌더링에는 Django 템플릿, JSON 응답에는 DRF Serializer를 활용한다.",
        "비즈니스 로직은 모델(models) 및 폼(forms)에 작성하고, 뷰는 요청 처리에 집중하도록 가볍게 유지한다.",
        "Django의 URL 디스패처(urls.py)를 활용하여 명확하고 RESTful한 URL 패턴을 정의한다.",
        "Django 보안 베스트 프랙티스(CSRF 보호, SQL 인젝션 방지, XSS 예방 등)를 철저히 준수한다.",
        "단위 테스트 및 통합 테스트를 위해 Django의 unittest 및 pytest-django를 활용한다.",
        "자주 조회되는 데이터를 위해 Django 캐싱 프레임워크를 적극 활용한다.",
        "인증, 로깅, 보안과 같은 공통 작업을 Django 미들웨어를 사용하여 처리한다."
      ]
    },
    {
      "category": "Django/Templates (Bootstrap 5 적용)",
      "items": [
        "Django 템플릿 시스템을 사용하여 동적 HTML 페이지를 렌더링한다.",
        "Bootstrap 5를 적용하여 반응형(Responsive) 디자인과 현대적인 UI/UX를 구현한다.",
        "기본적인 Django 템플릿 상속 구조를 활용하여 유지보수가 용이하도록 한다.",
        "CSS와 JS 파일은 static 디렉터리에 저장하고, {% load static %} 태그를 활용하여 참조한다.",
        "HTML 구조를 Jinja2 기반 템플릿 태그를 활용하여 동적으로 구성한다."
      ]
    },
    {
      "category": "템플릿 추가 규칙",
      "items": [
        "템플릿 상속(Inheritance)을 적극 활용하여 base.html을 만들어서 재사용 가능한 레이아웃을 유지한다.",
        "include 태그로 네비게이션 바, 푸터, 사이드바 등을 분리하여 재사용한다.",
        "{% static %} 태그를 활용하여 정적 파일을 관리한다.",
        "{% url %} 태그로 URL을 동적으로 설정하여 하드코딩을 피한다.",
        "with 태그로 변수의 가독성을 향상시킨다.",
        "forloop.counter로 리스트 항목 번호를 출력한다.",
        "if 문을 활용하여 조건부 렌더링을 구현한다.",
        "템플릿 내에서 |safe 필터 남용을 금지하여 XSS 공격을 방지한다.",
        "템플릿 내에서 복잡한 로직을 피하고, 최소한의 연산만 수행한다."
      ]
    },
    {
      "category": "성능 최적화",
      "items": [
        "Django ORM의 select_related, prefetch_related를 활용하여 쿼리 성능을 최적화한다.",
        "Django 캐싱 프레임워크(Redis, Memcached 등)를 활용하여 데이터베이스 부하를 줄인다.",
        "데이터베이스 인덱싱 및 쿼리 최적화 기법을 적용하여 성능을 개선한다.",
        "비동기 뷰 및 백그라운드 태스크(Celery)를 활용하여 I/O 바운드 또는 장기 실행 작업을 처리한다.",
        "Django 정적 파일 관리 시스템(WhiteNoise, CDN 연동)을 활용하여 정적 파일 로딩을 최적화한다."
      ]
    },
    {
      "category": "핵심 개발 원칙",
      "items": [
        "Django의 '관례보다 설정(Convention Over Configuration)' 철학을 따르며, 불필요한 보일러플레이트 코드를 줄인다.",
        "보안(Security)과 성능(Performance) 최적화를 모든 개발 단계에서 고려한다.",
        "프로젝트의 구조를 논리적으로 유지하여 가독성과 유지보수성을 높인다."
      ]
    },
    {
      "category": "프로젝트 구조",
      "description": "Django 프로젝트의 권장 디렉토리 구조",
      "structure": {
        "프로젝트명/": {
          "apps/": {
            "users/": {
              "static/": {
                "users/": {
                  "css/": {},
                  "js/": {},
                  "images/": {}
                }
              },
              "templates/": {
                "users/": {
                  "login.html": "",
                  "profile.html": ""
                }
              }
            },
            "posts/": {
              "static/": {
                "posts/": {
                  "css/": {},
                  "js/": {},
                  "images/": {}
                }
              },
              "templates/": {
                "posts/": {
                  "list.html": "",
                  "detail.html": ""
                }
              }
            }
          },
          "static/": {
            "css/": {
              "common.css": ""
            },
            "js/": {
              "main.js": ""
            },
            "images/": {
              "logo.png": ""
            }
          },
          "templates/": {
            "base.html": "",
            "header.html": "",
            "footer.html": ""
          },
          "config/": {
            "asgi.py": "",
            "__init__.py": "",
            "settings.py": "",
            "urls.py": "",
            "wsgi.py": ""
          },
          ".env": "",
          "manage.py": "",
          "media/": {},
          ".venv/": {}
        }
      }
    }
  ]
}